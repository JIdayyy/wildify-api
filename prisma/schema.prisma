generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id         String     @id @default(uuid())
  title      String     @unique
  link       String
  duration   String     @default("0:00")
  artist     Artist     @relation(fields: [artistId], references: [id],onDelete: Cascade)
  artistId   String
  playlists  Playlist[]
  album      Album      @relation(fields: [albumId], references: [id],onDelete: Cascade)
  albumId    String
  user       User?      @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId     String?
  genre     Genre      @relation(fields: [genreId], references: [id],onDelete: Cascade)
  genreId   String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  soundWave SoundWave? 
}

model Genre {
  id         String     @id @default(uuid())
  name       String     @unique
  songs      Song[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model SoundWave {
  id String @id@default(uuid())
  song Song @relation(fields: [songId], references: [id],onDelete: Cascade)
  songId String @unique()
  data String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model Artist {
  id      String  @id @default(uuid())
  name    String  @unique
  picture String?
  songs   Song[]
  albums  Album[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Album {
  id       String  @id @default(uuid())
  title    String  @unique
  picture  String?
  artist   Artist @relation(fields: [artistId], references: [id],onDelete: Cascade)
  artistId String
  songs    Song[]
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model Playlist {
  id          String @id @default(uuid())
  title       String @unique
  description String
  picture     String?
  songs       Song[]
  user        User  @relation(fields: [userId], references: [id],onDelete: Cascade)
  userId      String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

model User {
  id       String   @id @default(uuid())
  username String   @unique
  email    String   @unique
  password String
  songs    Song[]
  playlists Playlist[]
  role     Role     @default(USER)
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
}

enum Role {
  ADMIN
  USER
}